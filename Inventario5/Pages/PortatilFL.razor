@page "/PortatilFL"
@page "/PortatilFL/{operation}/{llamador}"

@inject NavigationManager NavigationManager

@using Inventario5.Models
@using Microsoft.EntityFrameworkCore;
@using Inventario5.Shared.clases;
@using Inventario5.Components;

<h1>@PLURAL_NAME</h1>


@if (lItem == null) {
    <p><em>Cargando...</em></p>
} else {
    <div class="container">
        <div class="row">
            <div class="col"><h2>Lista</h2></div>
            <div class="col-auto"><NavLink class="btn btn-primary" href="PortatilFE/insert/0">Crear @SINGULAR_NAME</NavLink></div>
        </div>
        <div class="row"><div class="col"><Mensajes lMensaje="this.lMensaje" /></div></div>
        
        <table class="table">
            <thead>
                <tr>
                    <th>Código</th>
                    <th>Número de Serie</th>
                    <th>Persona</th>
                    <th>Ubicación</th>
                    <th>Marca y Modelo</th>
                    <th>Opciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in lItem) {
                    actual = item;
                    <tr>
                        <td>@textoElementoInventariableCodigo</td>
                        <td>@textoOrdenadorNumeroSerie</td>
                        <td>@textoPersonaNomb</td>
                        <td>@textoUbicacionNomb</td>
                        <td>@textoMarcaymodeloNomb</td>
                        <td>
                            @((MarkupString)On.generateButtons("Portatil",Operation,item.Id))
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

}

@code {

    private const string OPERATION_PAGE = "PortatilFE";
    private const string SINGULAR_NAME= "Portátil";
    private const string PLURAL_NAME = "Portátiles";

    [Parameter]
    public string Operation { get; set; }
    [Parameter]
    public string Llamador { get; set; }

    private Portatil actual; //Almacena el elemento actual para no ser necesario el pasarlo como parámetro al pedirlo en otras funciones
    private List<Portatil> lItem; //Lista de elementos en los que se basa el formulario de lista.
    private Ordenador Ordenador => actual.IdNavigation; //Utilidad para obtener el ordenador
    private ElementoInventariable ElementoInventariable => actual.IdNavigation.IdNavigation;//Utilidad para obtener el ElementoInventariable
    private string textoElementoInventariableCodigo => ElementoInventariable.Codigo ?? "Código no definido";
    private string textoOrdenadorNumeroSerie => Ordenador.NumeroSerie ?? "Número de serie no definido";
    private string textoPersonaNomb => ElementoInventariable.IdPersonaNavigation != null ? ElementoInventariable.IdPersonaNavigation.Nomb : "Persona no definida";
    private string textoUbicacionNomb => ElementoInventariable.IdUbicacionNavigation != null ? ElementoInventariable.IdUbicacionNavigation.Nomb : "Ubicación no definida";
    private string textoMarcaymodeloNomb => ElementoInventariable.IdMarcaYmodeloNavigation != null ? ElementoInventariable.IdMarcaYmodeloNavigation.Nomb : "Marca y modelo no definidos";


    private List<string> lMensaje = new List<string>();
    private InventarioDBContext context = new InventarioDBContext();

    protected override void OnInitialized() {
        this.lItem = context.Portatils
            .Include(x => x.IdNavigation)
                .ThenInclude(x => x.IdNavigation)
                    .ThenInclude(p => p.IdPersonaNavigation)
            .Include(x => x.IdNavigation)
                .ThenInclude(x => x.IdNavigation)
                    .ThenInclude(u => u.IdUbicacionNavigation)
            .Include(x => x.IdNavigation)
                .ThenInclude(x => x.IdNavigation)
                    .ThenInclude(m => m.IdMarcaYmodeloNavigation)
            .ToList();
    }
}
