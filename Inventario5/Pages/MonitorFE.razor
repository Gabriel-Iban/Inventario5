@page "/MonitorFE"
@page "/MonitorFE/{operationparameter}/{idparameter:int}"

@inject NavigationManager NavigationManager
@inject History History

@using Inventario5.Models
@using Microsoft.EntityFrameworkCore;
@using Inventario5.Shared.clases;
@using Inventario5.Components;

<h1>Monitor</h1>

@if (this.state.item == null) {
    <p><em>Cargando...</em></p>
} else {
    <div class="container">
        <div class="row">
            <div class="col">
                <h2>@state.OperationText</h2>
            </div>
        </div>

        <div class="row"><div class="col"><Mensajes lMensaje="this.lMensaje" /></div></div>
        <EditForm Model="state.item">

            <div class="row">
                <div class="col">
                    <div class="form-group">
                        <label for="codigo" class="control-label">Código</label>
                        <InputText @bind-Value="this.state.elementoinventariable.Codigo" id="codigo" class="form-control" />
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <div class="form-group">
                        <label for="tamanoPantalla" class="control-label">Tamaño de la pantalla (pulgadas)</label>
                        <InputNumber @bind-Value="this.state.item.TamanoPantalla" id="tamanoPantalla" class="form-control" />
                    </div>
                </div>
                <div class="col">
                    <div class="form-group">
                        &nbsp;
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <div class="form-group">
                        <label for="resolucionX" class="control-label">Resolución X</label>
                        <InputNumber @bind-Value="this.state.item.ResolucionX" id="resolucionX" class="form-control" />
                    </div>
                </div>
                <div class="col">
                    <div class="form-group">
                        <label for="resolucionY" class="control-label">Resolución Y</label>
                        <InputNumber @bind-Value="this.state.item.ResolucionY" id="resolucionY" class="form-control" />
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <div class="form-group">
                        <label for="idWorkstation" class="control-label grey">Estación de Trabajo asignada</label>
                        <div class="input-group mb-3">
                            <label id="idWorkstation" class="form-control readOnly">@this.WorkstationOrdenadorNomb</label>
                            <div class="input-group-append">
                                <button class="input-group-text btn btn-primary" id="basic-addon2" @onclick="btnWorkstationClick">Buscar</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <div class="form-group">
                        <label for="idPersona" class="control-label grey">Persona asignada</label>
                        <div class="input-group mb-3">
                            <label id="idPersona" class="form-control readOnly">@this.PersonaNomb</label>
                            <div class="input-group-append">
                                <button class="input-group-text btn btn-primary" id="basic-addon2" @onclick="btnPersonaClick">Buscar</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <div class="form-group">
                        <label for="idPersona" class="control-label">Ubicación</label>
                        <div class="input-group mb-3">
                            <label id="idUbicacion" class="form-control readOnly">@this.UbicacionNomb</label>
                            <div class="input-group-append">
                                <button class="input-group-text btn btn-primary" id="basic-addon2" @onclick="btnUbicacionClick">Buscar</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <div class="form-group">
                        <label for="idPersona" class="control-label">Marca y Modelo</label>
                        <div class="input-group mb-3">
                            <label id="idMarcaymodelo" class="form-control readOnly">@this.MarcaymodeloNomb</label>
                            <div class="input-group-append">
                                <button class="input-group-text btn btn-primary" id="basic-addon2" @onclick="btnMarcaymodeloClick">Buscar</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <div class="form-group">
                        <label for="notas" class="control-label">Notas</label>
                        <InputTextArea @bind-Value="this.state.elementoinventariable.Notas" id="notas" class="form-control" />
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-6 text-center">
                    <button class="btn btn-primary" @onclick="MakeOperation">@state.OperationText</button>
                </div>
                <div class="col-6 text-center">
                    <a class="btn btn-secondary" href="MonitorFL">Cancelar</a>
                </div>
            </div>
        </EditForm>
        <div>&nbsp;</div>
    </div>
}

@code {
    [Parameter]
    public string OperationParameter { get; set; }
    [Parameter]
    public int IdParameter { get; set; }

    public class MonitorFEState : IHistoryItem {
        public string Operation;
        public int Id;

        public string OperationText;

        public Monitor item;
        public ElementoInventariable elementoinventariable;

    }
    public MonitorFEState state;

    private string WorkstationOrdenadorNomb;
    private string PersonaNomb;
    private string UbicacionNomb;
    private string MarcaymodeloNomb;

    private InventarioDBContext context = new InventarioDBContext();
    private InventarioDBContext contextLectura = new InventarioDBContext();

    private List<string> lMensaje = new List<string>();

    protected override void OnInitialized() {
        base.OnInitialized();
        this.state = History.Get(typeof(MonitorFEState)) as MonitorFEState;
        if (this.state == null) {
            this.state = new MonitorFEState();
            this.state.Operation = OperationParameter;
            this.state.Id = IdParameter;
            this.state.OperationText = On.getText(this.state.Operation);
            switch (this.state.Operation) {
                case On.insert:
                    this.state.item = new Monitor();
                    this.state.elementoinventariable = new ElementoInventariable();
                    this.state.elementoinventariable.Monitor= this.state.item;
                    break;
                case On.update:
                case On.delete:
                    this.state.item = context.Monitors.Find(this.state.Id);
                    this.state.elementoinventariable = context.ElementoInventariables.Find(this.state.Id);
                    break;
                default:
                    throw new Exception("Operación no considerada");
            }

        } else {
            History.Remove(this.state);
        }

        Workstation workstation = History.Get(typeof(Workstation)) as Workstation;
        if (workstation!= null) {
            this.state.item.IdWorkstation= workstation.Id;
            History.Remove(workstation);
        }

        Persona persona = History.Get(typeof(Persona)) as Persona;
        if (persona != null) {
            this.state.elementoinventariable.IdPersona = persona.Id;
            History.Remove(persona);
        }
        Ubicacion ubicacion = History.Get(typeof(Ubicacion)) as Ubicacion;
        if (ubicacion != null) {
            this.state.elementoinventariable.IdUbicacion = ubicacion.Id;
            History.Remove(ubicacion);
        }
        Marcaymodelo marcaymodelo = History.Get(typeof(Marcaymodelo)) as Marcaymodelo;
        if (marcaymodelo != null) {
            this.state.elementoinventariable.IdMarcaYmodelo = marcaymodelo.Id;
            History.Remove(marcaymodelo);
        }
        this.CargarElementosAuxiliares();
    }
    protected void CargarElementosAuxiliares() {
        if (this.state.item.IdWorkstation!= null) {
            this.WorkstationOrdenadorNomb = this.contextLectura.Ordenadors.Find(this.state.item.IdWorkstation).Nomb;
        }
        if (this.state.elementoinventariable.IdPersona != null) {
            this.PersonaNomb = this.contextLectura.Personas.Find(this.state.elementoinventariable.IdPersona).Nomb;
        }
        if (this.state.elementoinventariable.IdUbicacion != null) {
            this.UbicacionNomb = this.contextLectura.Ubicacions.Find(this.state.elementoinventariable.IdUbicacion).Nomb;
        }
        if (this.state.elementoinventariable.IdMarcaYmodelo != null) {
            this.MarcaymodeloNomb = this.contextLectura.Marcaymodelos.Find(this.state.elementoinventariable.IdMarcaYmodelo).Nomb;
        }
    }
    protected void MakeOperation() {
        this.lMensaje.Clear();
        switch (this.state.Operation) {
            case On.insert:
                context.ElementoInventariables.Add(this.state.elementoinventariable);
                context.Monitors.Add(this.state.item);
                break;

            case On.update:
                context.ElementoInventariables.Update(this.state.elementoinventariable);
                context.Monitors.Update(state.item);
                break;

            case On.delete:
                context.Monitors.Remove(this.state.item);
                context.ElementoInventariables.Remove(this.state.elementoinventariable);
                break;
            default:
                throw new Exception("Operación no considerada");
        }
        int changesNumber = 0;
        try {
            changesNumber = context.SaveChanges();
        } catch (Exception ex) {
            this.lMensaje.Add(ex.Message);
            if (ex.InnerException != null) {
                this.lMensaje.Add(ex.InnerException.Message);
            }
            changesNumber = 0;
        }
        if (changesNumber > 0) {
            NavigationManager.NavigateTo("MonitorFL");
        }

    }
    private void btnWorkstationClick() {
        //Añadir estado al history
        this.History.Add(this.state);
        NavigationManager.NavigateTo("WorkstationFL/" + On.select + "/" + "MonitorFE");
    }
    private void btnPersonaClick() {
        //Añadir estado al history
        this.History.Add(this.state);
        NavigationManager.NavigateTo("PersonaFL/" + On.select + "/" + "MonitorFE");
    }

    private void btnUbicacionClick() {
        //Añadir estado al history
        this.History.Add(this.state);
        NavigationManager.NavigateTo("UbicacionFL/" + On.select + "/" + "MonitorFE");
    }

    private void btnMarcaymodeloClick() {
        //Añadir estado al history
        this.History.Add(this.state);
        NavigationManager.NavigateTo("MarcaymodeloFL/" + On.select + "/" + "MonitorFE");
    }
}
