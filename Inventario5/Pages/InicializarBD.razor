@page "/InicializarBD"

@using System.Data.SqlClient
@using System.Text
@using Inventario5.Models;
@using Microsoft.Extensions.Configuration;

<h1>Inicializar BD</h1>

<p>Pulse el botón para eliminar los datos actuales y rellenar con datos para pruebas</p>

<div>
    <button class="btn btn-primary" @onclick="DatosPruebasExec">Rellenar con datos</button>
    <div>
        <output class="alert alert-secondary mt-4" role="alert" style="width:100%"><ul>@((MarkupString)mensajes)</ul></output>
    </div>

</div>

@code {
    private string mensajes;


    protected string[] nombresTablas = { "portatil", "monitor", "workstation", "monitor", "ordenador", "elementoinventariable", "persona", "ubicacion", "marcaymodelo", "unidad", "procesador" };
    protected void vaciarTablas(SqlConnection con) {
        foreach (var item in nombresTablas) {
            vaciarTabla(con, item);
        }
    }
    protected void vaciarTabla(SqlConnection con, string nombreTabla) {
        SqlCommand com = con.CreateCommand();
        com.CommandText = "delete from " + nombreTabla;
        com.ExecuteNonQuery();
        try {
            com.CommandText = "DBCC CHECKIDENT('[" + nombreTabla + "]', RESEED, 0)";
            com.ExecuteNonQuery();
        } catch (Exception) {// nos comemos la excepción por si no tiene columna identidad

        }
    }
    protected void mensaje(string cad) {
        this.mensajes += "<li>" + cad + "</li>";
    }
    protected string comillas(string cad) {
        return "'" + cad + "'";
    }
    protected void insertarDatos(SqlConnection con, string nombreTabla, string[] datos) {
        SqlCommand com = con.CreateCommand();
        StringBuilder sb = new StringBuilder();
        sb.Append("insert into ");
        sb.Append(nombreTabla);
        sb.Append(" values (");
        bool primero = true;
        foreach (var item in datos) {

            if (primero) {
                primero = false;
            } else {
                sb.Append(",");
            }
            sb.Append(item);
        }
        sb.Append(")");
        this.mensaje(sb.ToString());
        com.CommandText = sb.ToString();
        try {
            com.ExecuteNonQuery();
        } catch (Exception ex) {
            this.mensaje(ex.Message);
            throw;
        }
    }
    protected decimal idgi(SqlConnection con, string nombreTabla, string[] datos) {
        insertarDatos(con, nombreTabla, datos);
        decimal result = 0;
        using (SqlCommand com = con.CreateCommand()) {
            com.CommandText = "select @@identity";
            try {
                object obj = com.ExecuteScalar();
                if(obj == System.DBNull.Value) {
                    result = 0;
                }else {
                    result = Convert.ToDecimal(obj);
                }
            } catch (Exception ex) {
                this.mensaje(ex.Message);
                throw;
            }
        }
        return result;
    }
    protected void DatosPruebasExec() {

        SqlConnection con = new System.Data.SqlClient.SqlConnection();
        //con.ConnectionString = "Source=(local);Initial Catalog=\"InventarioDB\";Integrated Security=True";
        IConfigurationRoot configuration = new ConfigurationBuilder()

                .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
                .AddJsonFile("appsettings.json")
                .Build();
        string conString = configuration.GetConnectionString("AppConnection");
        con.ConnectionString = "Server=localhost\\SQLEXPRESS;Database=InventarioDB;Trusted_Connection=True;";
        con.Open();

        this.mensaje("conexión abierta");

        this.vaciarTablas(con);


        var idAmd = this.idgi(con, "procesador", new string[] { comillas("AMD Ryzen Threadripper 3970X") }).ToString();
        var idIntel = this.idgi(con, "procesador", new string[] { comillas("Intel Core i9-10940X") }).ToString();

        var idMega = this.idgi(con, "unidad", new string[] { comillas("Megabyte") }).ToString();
        var idGiga = this.idgi(con, "unidad", new string[] { comillas("GigaByte") }).ToString();
        var idTera = this.idgi(con, "unidad", new string[] { comillas("TeraByte") }).ToString();

        var idmmEstacionTrabajoGabrielIban = this.idgi(con, "marcaymodelo", new string[] { comillas("HP / Z2 Mini G4") }).ToString();
        var idmmEstacionTrabajoPablo = this.idgi(con, "marcaymodelo", new string[] { comillas("Hp / Z2 Mini G5") }).ToString();

        var idmmPortatilPatri = this.idgi(con, "marcaymodelo", new string[] { comillas("Lenovo / Yoga 730") }).ToString();
        var idmmPortatilGabrielIban = this.idgi(con, "marcaymodelo", new string[] { comillas("Asus / Zenbook UX462DA") }).ToString();

        var idmmMonitorGabrielIban = this.idgi(con, "marcaymodelo", new string[] { comillas("HP / Monitor 22fw") }).ToString();
        var idmmMonitorPablo = this.idgi(con, "marcaymodelo", new string[] { comillas("HP / Monitor 27fw") }).ToString();

        var idDespachoProgramacion = this.idgi(con, "ubicacion", new string[] { comillas("Sede Central / Despacho Programación") }).ToString();
        var idDespachoGestion = this.idgi(con, "ubicacion", new string[] { comillas("Sede Central / Despacho Gestión") }).ToString();

        var idGabrielIban= this.idgi(con, "persona", new string[] { comillas("Gabriel Ibán Cruz Fraguela") }).ToString();
        var idPablo = this.idgi(con, "persona", new string[] { comillas("Pablo Vázquez Fernández") }).ToString();
        var idPatri = this.idgi(con, "persona", new string[] { comillas("Patricia Pazos Alves") }).ToString();

        //Workstation Gabriel
        var idElementoInventariable = this.idgi(con, "elementoInventariable", new string[] { comillas("WS00004"), comillas("Nada relevante"), idGabrielIban, idDespachoProgramacion, idmmEstacionTrabajoGabrielIban }).ToString();
        this.idgi(con, "ordenador", new string[] { idElementoInventariable.ToString(), comillas("e-gabriel"),comillas("NS34567654XD"), "16", idGiga, "250", idGiga, idAmd, "2.4" });
        this.idgi(con, "workstation", new string[] { idElementoInventariable.ToString() });
        var idWorkstationGabrielIban = idElementoInventariable;


        //Monitor
        idElementoInventariable = this.idgi( con, "elementoInventariable", new string[] { comillas("MON00015"), comillas("Monitor que tiene un punto rojo en la parte superior derecha. Pendiente de tramitar garantía.") , idGabrielIban, idDespachoProgramacion, idmmMonitorGabrielIban}).ToString();
        this.idgi(con, "monitor", new string[] { idElementoInventariable.ToString(), "24.2", "1920", "1080", idWorkstationGabrielIban });


        //Workstation Pablo
        idElementoInventariable = this.idgi(con, "elementoInventariable", new string[] { comillas("WS00003"), comillas(""), idPablo, idDespachoProgramacion, idmmEstacionTrabajoPablo}).ToString();
        this.idgi(con, "ordenador", new string[] { idElementoInventariable.ToString(), comillas("e-pablo"),comillas("NS345656684XD"), "16", idGiga, "500", idGiga, idIntel, "3.7" });
        this.idgi(con, "workstation", new string[] { idElementoInventariable.ToString() });
        var idWorkstationPablo = idElementoInventariable;


        //Monitor
        idElementoInventariable = this.idgi(con, "elementoInventariable", new string[] { comillas("MON00020"), comillas(""), idPablo, idDespachoProgramacion, idmmMonitorPablo}).ToString();
        this.idgi(con, "monitor", new string[] { idElementoInventariable.ToString(), "27", "1920", "1080", idWorkstationPablo});

        //Portatil
        idElementoInventariable = this.idgi(con, "elementoInventariable", new string[] { comillas("POR000001"), comillas("Portátil del comercial"), idPatri, idDespachoGestion, idmmPortatilGabrielIban }).ToString();
        this.idgi(con, "ordenador", new string[] { idElementoInventariable.ToString(), comillas("p-comercial"), comillas("CSH456345CE"), "8", idGiga, "250", idGiga, idAmd, "2.8" });
        this.idgi(con, "portatil", new string[] { idElementoInventariable.ToString(), "14" });



        /*
        this.insertarDatos(con, )

        "portatil",
        "monitor",
        "workstation",
        "monitor",
        "ordenador",
        "elementoinventariable",
        "persona",
        "ubicacion",
        "marcaymodelo",
        "unidad",
        */

        con.Close();

    }
}
