@page "/WorkstationFE"
@page "/WorkstationFE/{operationparameter}/{idparameter:int}"

@inject NavigationManager NavigationManager
@inject History History

@using Inventario5.Data
@using Inventario5.Models
@using Microsoft.EntityFrameworkCore;
@using Inventario5.Shared.clases;

<h1>Estación de Trabajo</h1>

@if (this.state.item == null) {
    <p><em>Cargando...</em></p>
} else {
    <div class="container">
        <div class="row">
            <div class="col">
                <h2>@state.OperationText</h2>
            </div>
        </div>

        <div>
            <output class="alert alert-secondary mt-4" role="alert" style="width:100%"><ul>@((MarkupString)mensajes)</ul></output>
        </div>
        <EditForm Model="state.item">

            <div class="row">
                <div class="col">
                    <div class="form-group">
                        <label for="codigo" class="control-label">Código</label>
                        <InputText @bind-Value="this.state.elementoinventariable.Codigo" id="codigo" class="form-control" />
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <div class="form-group">
                        <label for="numeroserie" class="control-label">Número de Serie</label>
                        <InputText @bind-Value="this.state.ordenador.NumeroSerie" id="numeroserie" class="form-control" />
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col">
                    <div class="form-group">
                        <label for="memoria" class="control-label">Memoria</label>
                        <InputNumber @bind-Value="this.state.ordenador.Memoria" id="memoria" class="form-control" />
                    </div>
                </div>
                <div class="col">
                    <div class="form-group">
                        <label for="unidadMemoria" class="control-label">Unidad</label>
                        <InputSelect @bind-Value="this.state.ordenador.UnidadMemoria" id="unidadMemoria" class="form-control">
                            @foreach (var item in lUnidad) {
                                <option value="@item.Id">@item.Nomb</option>
                                }
                        </InputSelect>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <div class="form-group">
                        <label for="discoduro" class="control-label">Disco Duro</label>
                        <InputNumber @bind-Value="this.state.ordenador.DiscoDuro" id="discoduro" class="form-control" />
                    </div>
                </div>
                <div class="col">
                    <div class="form-group">
                        <label for="unidadDiscoDuro" class="control-label">Unidad</label>
                        <InputSelect @bind-Value="this.state.ordenador.UnidadDiscoDuro" id="unidadDiscoDuro" class="form-control">
                            @foreach (var item in lUnidad) {
                                <option value="@item.Id">@item.Nomb</option>
                                }
                        </InputSelect>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <div class="form-group">
                        <label for="idProcesador" class="control-label">Procesador</label>
                        <InputSelect @bind-Value="this.state.ordenador.IdProcesador" id="idProcesador" class="form-control">
<!--                            @@foreach (var item in lProcesador) {
                                <option value="@@item.Id">@@item.Nomb</option>
                                }
    -->
                        </InputSelect>
                    </div>
                </div>
                <div class="col">
                    <div class="form-group">
                        <label for="velocidadProcesador" class="control-label">Velocidad Procesador</label>
                        <InputNumber @bind-Value="this.state.ordenador.VelocidadProcesador" id="velocidadProcesador" class="form-control" />
                    </div>
                </div>
            </div>
            <p>Estos 3 últimos campos no son funcionales todavía dado que se utilizarán los grid en lugar de combos y no están hechos todavía</p>
            <div class="row">
                <div class="col">
                    <div class="form-group">
                        <label for="idPersona" class="control-label">Persona asignada</label>
                        <div class="input-group mb-3">
                            <InputText @bind-Value="this.state.persona.Nomb" class="form-control" />
                            <div class="input-group-append">
                                <span class="input-group-text btn btn-primary" id="basic-addon2" @onclick="btnPersonaClick">Buscar</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <div class="form-group">
                        <label for="idPersona" class="control-label">Ubicación</label>
                        <div class="input-group mb-3">
                            <InputText @bind-Value="this.state.ubicacion.Nomb" class="form-control" />
                            <div class="input-group-append">
                                <span class="input-group-text btn btn-primary" id="basic-addon2">Buscar</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <div class="form-group">
                        <label for="idPersona" class="control-label">Marca y Modelo</label>
                        <div class="input-group mb-3">
                            <InputText @bind-Value="this.state.marcaymodelo.Nomb" class="form-control" />
                            <div class="input-group-append">
                                <span class="input-group-text btn btn-primary" id="basic-addon2">Buscar</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <div class="form-group">
                        <label for="notas" class="control-label">Notas</label>
                        <InputTextArea @bind-Value="this.state.elementoinventariable.Notas" id="notas" class="form-control" />
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-6 text-center">
                    <button class="btn btn-primary" @onclick="MakeOperation">@state.OperationText</button>
                </div>
                <div class="col-6 text-center">
                    <a class="btn btn-secondary" href="WorkstationFL">Cancelar</a>
                </div>
            </div>
        </EditForm>
        <div>&nbsp;</div>
    </div>
}

@code {
    [Parameter]
    public string OperationParameter { get; set; }
    [Parameter]
    public int IdParameter { get; set; }

    public class WorkstationFEState : IHistoryItem {
        public string Operation;
        public int Id;

        public string OperationText;

        //****public string borrame;

        public Workstation item;
        public Ordenador ordenador;
        public ElementoInventariable elementoinventariable;
        public Persona persona = new Persona();
        public Ubicacion ubicacion = new Ubicacion();
        public Marcaymodelo marcaymodelo = new Marcaymodelo();

    }
    public WorkstationFEState state;

    private DbSet<Unidad> lUnidad;
//    private DbSet<Procesador> lProcesador;

    private InventarioDBContext context = new InventarioDBContext();

    private string mensajes;

    protected void mensaje(string cad) {
        this.mensajes += "<li>" + cad + "</li>";
    }

    protected override void OnInitialized() {
        base.OnInitialized();
        this.state = History.Get(typeof(WorkstationFEState)) as WorkstationFEState;
        if (this.state == null) {
            this.state = new WorkstationFEState();
            this.state.Operation = OperationParameter;
            this.state.Id = IdParameter;
            this.state.OperationText = On.getText(this.state.Operation);
            switch (this.state.Operation) {
                case On.insert:
                    this.state.item = new Workstation();
                    this.state.ordenador = new Ordenador();
                    this.state.elementoinventariable = new ElementoInventariable();
                    this.state.elementoinventariable.Ordenador = this.state.ordenador;
                    this.state.ordenador.Workstation = this.state.item;
                    break;
                case On.update:
                case On.delete:
                    this.state.item = context.Workstations.Find(this.state.Id);
                    this.state.ordenador = context.Ordenadors.Find(this.state.Id);
                    this.state.elementoinventariable = context.ElementoInventariables.Find(this.state.Id);
                    this.CargarElementosAuxiliares();
                    break;
                default:
                    throw new Exception("Operación no considerada");
            }

        } else {
            History.Remove(this.state);
        }
        this.lUnidad = context.Unidads;
        //this.lProcesador = context.Procesadors;
        Persona persona = History.Get(typeof(Persona)) as Persona;
        if (persona != null) {
            this.state.elementoinventariable.IdPersona = persona.Id;
            this.state.elementoinventariable.IdPersonaNavigation = context.Personas.Find(persona.Id);
            this.state.persona = persona;
            History.Remove(persona);
        }
        Ubicacion ubicacion = History.Get(typeof(Ubicacion)) as Ubicacion;
        if (ubicacion != null) {
            this.state.elementoinventariable.IdUbicacion = ubicacion.Id;
            this.state.elementoinventariable.IdUbicacionNavigation = context.Ubicacions.Find(ubicacion.Id);
            this.state.ubicacion = ubicacion;
            History.Remove(this.state.ubicacion);
        }
        Marcaymodelo marcaymodelo = History.Get(typeof(Marcaymodelo)) as Marcaymodelo;
        if (marcaymodelo != null) {
            this.state.elementoinventariable.IdMarcaYmodelo = marcaymodelo.Id;
            this.state.elementoinventariable.IdMarcaYmodeloNavigation = context.Marcaymodelos.Find(marcaymodelo.Id);
            this.state.marcaymodelo = marcaymodelo;
            History.Remove(this.state.marcaymodelo);
        }
    }
    protected void CargarElementosAuxiliares() {

        if (this.state.elementoinventariable.IdPersona != null) {
            this.state.persona = context.Personas.Find(this.state.elementoinventariable.IdPersona);
        }
        if (this.state.elementoinventariable.IdUbicacion != null) {
            this.state.ubicacion = context.Ubicacions.Find(this.state.elementoinventariable.IdUbicacion);
        }
        if (this.state.elementoinventariable.IdMarcaYmodelo != null) {
            this.state.marcaymodelo = context.Marcaymodelos.Find(this.state.elementoinventariable.IdMarcaYmodelo);
        }
    }
    protected void MakeOperation() {
        switch (this.state.Operation) {
            case On.insert:
                context.ElementoInventariables.Add(this.state.elementoinventariable);
                context.Ordenadors.Add(this.state.ordenador);
                context.Workstations.Add(this.state.item);
                break;

            case On.update:
                try {
                    context.ElementoInventariables.Update(this.state.elementoinventariable);
                }catch(Exception ex) {
                    string aux = ex.Message;
                    throw;
                }
                context.Ordenadors.Update(this.state.ordenador);
                context.Workstations.Update(state.item);
                break;

            case On.delete:
                context.Workstations.Remove(this.state.item);
                context.Ordenadors.Remove(this.state.ordenador);
                context.ElementoInventariables.Remove(this.state.elementoinventariable);
                break;
            default:
                throw new Exception("Operación no considerada");
        }
        var changesNumber = context.SaveChanges();
        if (changesNumber > 0) {
            NavigationManager.NavigateTo("WorkstationFL");
        }

    }
    private void btnPersonaClick() {
        //Añadir estado al history

        this.History.Add(this.state);

        NavigationManager.NavigateTo("PersonaFL/" + On.select + "/" + "WorkstationFE");
    }
}
